<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <title>Budget Tracker - Multi Tabs</title>
  <style>
    body {
      font-family: Arial, sans-serif;
      padding: 15px;
      max-width: 600px;
      margin: auto;
      background: #f5f5f5;
    }
    h1 {
      text-align: center;
      margin-bottom: 15px;
    }
    .tabs {
      display: flex;
      margin-bottom: 15px;
      gap: 10px;
      justify-content: center;
    }
    .tab {
      padding: 8px 20px;
      background: #ddd;
      border-radius: 5px 5px 0 0;
      cursor: pointer;
      user-select: none;
      font-weight: bold;
    }
    .tab.active {
      background: #4285f4;
      color: white;
    }
    label {
      display: block;
      margin-top: 10px;
      margin-bottom: 5px;
    }
    input, button {
      padding: 10px;
      font-size: 16px;
      width: 100%;
      box-sizing: border-box;
      margin-bottom: 10px;
    }
    .purchase {
      display: flex;
      justify-content: space-between;
      background: white;
      margin-bottom: 6px;
      padding: 10px;
      border-radius: 6px;
      align-items: center;
    }
    .paid {
      background: #d4ffd4;
    }
    .actions button {
      margin-left: 5px;
      font-size: 14px;
      padding: 5px 10px;
      cursor: pointer;
    }
    .total {
      font-weight: bold;
      margin-top: 10px;
      text-align: center;
    }
  </style>
</head>
<body>
  <h1>Budget Tracker</h1>
  <div class="tabs">
    <div class="tab active" data-tab="spending">Spending</div>
    <div class="tab" data-tab="payback">Payback</div>
  </div>

  <div id="trackerArea">
    <label for="budgetInput">Set Total Budget ($):</label>
    <input type="number" id="budgetInput" placeholder="e.g. 5000" />

    <label for="descInput">Purchase Description:</label>
    <input type="text" id="descInput" placeholder="e.g. Groceries" />

    <label for="amountInput">Amount Spent ($):</label>
    <input type="number" id="amountInput" placeholder="e.g. 40" />

    <button id="addPurchaseBtn">Add Purchase</button>

    <div class="total" id="remaining"></div>

    <div id="purchaseList"></div>
  </div>

  <script>
    const tabs = document.querySelectorAll('.tab');
    let currentTab = 'spending';

    // Each tab stores its data separately in localStorage keys
    function storageKey(tab) {
      return `budgetTracker_${tab}`;
    }

    // Load data for current tab or defaults
    function loadData(tab) {
      const raw = localStorage.getItem(storageKey(tab));
      if (!raw) return { budget: 0, purchases: [] };
      try {
        return JSON.parse(raw);
      } catch {
        return { budget: 0, purchases: [] };
      }
    }

    // Save data for current tab
    function saveData(tab, data) {
      localStorage.setItem(storageKey(tab), JSON.stringify(data));
    }

    // Elements
    const budgetInput = document.getElementById('budgetInput');
    const descInput = document.getElementById('descInput');
    const amountInput = document.getElementById('amountInput');
    const addPurchaseBtn = document.getElementById('addPurchaseBtn');
    const remainingDiv = document.getElementById('remaining');
    const purchaseListDiv = document.getElementById('purchaseList');

    // Current tab data
    let tabData = loadData(currentTab);

    function render() {
      budgetInput.value = tabData.budget || '';
      purchaseListDiv.innerHTML = '';

      tabData.purchases.forEach((p, i) => {
        const div = document.createElement('div');
        div.className = 'purchase' + (p.paid ? ' paid' : '');
        div.innerHTML = `
          <div>
            <strong>${p.desc}</strong><br/>
            $${p.amount.toFixed(2)}
          </div>
          <div class="actions">
            <button onclick="togglePaid(${i})">${p.paid ? 'Undo' : 'Paid'}</button>
            <button onclick="editPurchase(${i})">Edit</button>
            <button onclick="deletePurchase(${i})">‚ùå</button>
          </div>
        `;
        purchaseListDiv.appendChild(div);
      });

      const spent = tabData.purchases.reduce((sum, p) => sum + p.amount, 0);
      remainingDiv.textContent = `Remaining: $${(tabData.budget - spent).toFixed(2)} / $${tabData.budget}`;
    }

    function saveAndRender() {
      saveData(currentTab, tabData);
      render();
    }

    function addPurchase() {
      const desc = descInput.value.trim();
      const amount = parseFloat(amountInput.value);
      if (!desc || isNaN(amount)) return alert('Please enter valid description and amount.');
      tabData.purchases.push({ desc, amount, paid: false });
      descInput.value = '';
      amountInput.value = '';
      saveAndRender();
    }

    function togglePaid(index) {
      tabData.purchases[index].paid = !tabData.purchases[index].paid;
      saveAndRender();
    }

    function editPurchase(index) {
      const p = tabData.purchases[index];
      const newDesc = prompt('Edit description:', p.desc);
      if (newDesc === null) return;
      const newAmountRaw = prompt('Edit amount:', p.amount);
      if (newAmountRaw === null) return;
      const newAmount = parseFloat(newAmountRaw);
      if (newDesc.trim() === '' || isNaN(newAmount)) return alert('Invalid input.');
      tabData.purchases[index] = { desc: newDesc.trim(), amount: newAmount, paid: p.paid };
      saveAndRender();
    }

    function deletePurchase(index) {
      if (confirm('Delete this purchase?')) {
        tabData.purchases.splice(index, 1);
        saveAndRender();
      }
    }

    budgetInput.addEventListener('change', () => {
      const newBudget = parseFloat(budgetInput.value);
      if (isNaN(newBudget) || newBudget < 0) {
        alert('Please enter a valid budget amount.');
        budgetInput.value = tabData.budget;
        return;
      }
      tabData.budget = newBudget;
      saveAndRender();
    });

    addPurchaseBtn.addEventListener('click', addPurchase);

    // Tab click handlers
    tabs.forEach(tab => {
      tab.addEventListener('click', () => {
        if (tab.dataset.tab === currentTab) return;
        // Save current tab data
        saveData(currentTab, tabData);

        // Switch active class
        tabs.forEach(t => t.classList.remove('active'));
        tab.classList.add('active');

        // Load new tab data
        currentTab = tab.dataset.tab;
        tabData = loadData(currentTab);
        render();
      });
    });

    // Expose functions for buttons inside purchases
    window.togglePaid = togglePaid;
    window.editPurchase = editPurchase;
    window.deletePurchase = deletePurchase;

    // Initial render
    render();
  </script>
</body>
</html>
